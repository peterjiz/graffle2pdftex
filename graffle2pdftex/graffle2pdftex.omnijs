/*{
    "author": "Peter El Jiz",
    "targets": ["omnigraffle"],
    "type": "action",
    "identifier": "com.peterjiz.PDFTex",
    "version": "0.1",
    "description": "Automates the process of creating PDF and PDF_Tex files from two OmniGraffle documents.",
    "label": "Export to Pdf_Tex",
    "mediumLabel": "Export to Pdf_Tex",
    "longLabel": "Export to Pdf_Tex",
    "paletteLabel": "Export to Pdf_Tex",
}*/

// for every object of shape text
// if fill color is null -> keep looping through parent until you get a fill color
// set textColor to fillColor found

//Starts off at a root node with a passed-down fillColor
//If the current node has a fillColor -> set new_fillColor to current node's fillColor
//If the current node does not have a fillColor -> set new_fillColor to passed-down fillColor
//If the current node has children
//      -> Get the last child node (last/background node)
//      -> If the last child node has a fillColor -> set new_fillColor to last child node's fillColor
//      -> For every child node, recurse
//If the current node does not have children and is a text object
//      -> Update the text variable (to get rid of MathLatex/Images)
//      -> Set the text color to new_fillColor
function stripTextColor(obj, fillColor, text) {
    if (typeof obj.fillColor === 'undefined' || obj.fillColor === null) {
        new_fillColor = fillColor
    } else {
        new_fillColor = obj.fillColor
    }

    if (typeof obj.graphics === 'undefined') {
        //stop recursion
        if (typeof obj.textColor === 'undefined' || obj.textColor === null) {
        } else {

            if (typeof fillColor === 'undefined' || fillColor === null) {
            } else {
                obj.text = obj.text
                obj.textColor = new_fillColor

                if (typeof text === 'undefined' || text === null) {
                } else {
                    obj.text = text
                }

            }
        }

    } else {
        // continue recursion
        lastElement = obj.graphics.at(-1)
        lastElementFillColor = lastElement.fillColor
        if (typeof lastElementFillColor === 'undefined' || lastElementFillColor === null) {
        } else {
            new_fillColor = lastElementFillColor
        }

        for (graphic of obj.graphics) {
            stripTextColor(graphic, new_fillColor, text)
        }

    }
}

function containsString(mainString, searchString) {
    return mainString.toLowerCase().includes(searchString.toLowerCase());
}

function computeBounds(points) {
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;

    points.forEach(point => {
        if (point.x < minX) minX = point.x;
        if (point.y < minY) minY = point.y;
        if (point.x > maxX) maxX = point.x;
        if (point.y > maxY) maxY = point.y;
    });

    return {
        minimumX: minX,
        minimumY: minY,
        maximumX: maxX,
        maximumY: maxY
    };
}

function extractExtremitiesCoordinates(obj) {
    var minimumX = Infinity;
    var minimumY = Infinity;
    var maximumX = -Infinity;
    var maximumY = -Infinity;

    function traverse(innerObj) {
        if (innerObj.shapeControlPoints) {

            bounds = computeBounds(innerObj.shapeControlPoints);
            boundsMinX = bounds.minimumX;
            boundsMaxX = bounds.maximumX;
            boundsMinY = bounds.minimumY;
            boundsMaxY = bounds.maximumY;

            if (boundsMinX < minimumX) {
                minimumX = boundsMinX;
            }

            if (boundsMinY < minimumY) {
                minimumY = boundsMinY;
            }

            if (boundsMaxX > maximumX) {
                maximumX = boundsMaxX;
            }

            if (boundsMaxY > maximumY) {
                maximumY = boundsMaxY;
            }
        }

        // if (innerObj.geometry) {
        //     // var objRotation = innerObj.rotation || 0;
        //     // rotateGraphic(innerObj, -objRotation)
        //
        //     var minX = innerObj.geometry.minX;
        //     var minY = innerObj.geometry.minY;
        //     var maxX = innerObj.geometry.maxX;
        //     var maxY = innerObj.geometry.maxY;
        //
        //     if (minX < minimumX) {
        //         minimumX = minX;
        //     }
        //
        //     if (minY < minimumY) {
        //         minimumY = minY;
        //     }
        //
        //     if (maxX > maximumX) {
        //         maximumX = maxX;
        //     }
        //
        //     if (maxY > maximumY) {
        //         maximumY = maxY;
        //     }
        //
        //     // rotateGraphic(innerObj, +objRotation)
        // }

        if (innerObj.graphics) {
            // Recurse into child graphics
            for (var child of innerObj.graphics) {
                traverse(child);
            }
        }
    }

    traverse(obj);

    return {
        minimumX: minimumX,
        minimumY: minimumY,
        maximumX: maximumX,
        maximumY: maximumY,
    };
}


function extractCanvasSize(obj) {
    return {height: obj.size.height, width: obj.size.width}
}

// function escapeLaTeX(str) {
//     const replacements = {
//         "#": "\\#",
//         "$": "\\$",
//         "%": "\\%",
//         "&": "\\&",
//         "_": "\\_",
//         "{": "\\{",
//         "}": "\\}",
//         "~": "\\textasciitilde",
//         "^": "\\textasciicircum",
//         "\\": "\\textbackslash",
//         "<": "\\textless",
//         ">": "\\textgreater",
//         "|": "\\textbar"
//     };
//
//     return str.replace(/[#\$%&_{}~^\\<>|]/g, char => replacements[char]);
// }

function escapeLaTeX(str) {
    const replacements = {
        "#": "\\#",
        "$": "\\$",
        "&": "\\&",
        "%": "\\%",
        "_": "\\_",
        "{": "\\{",
        "}": "\\}",
        "\\": "\\textbackslash",
        "~": "\\textasciitilde",
        "^": "\\textasciicircum",
        "<": "\\textless",
        ">": "\\textgreater",
        "|": "\\textbar"
    };

    let parts = str.split('!/');

    for (let i = 0; i < parts.length; i++) {
        if (i % 2 === 0) { // escape the text outside of the delimiters
            parts[i] = parts[i].replace(/[#\$%&_{}~^<>|]/g, char => replacements[char]);
        }
    }

    return parts.join(''); // join without adding the delimiter back
}

function removeLaTeXCommands(str) {
    let parts = str.split('!/');

    let result = '';
    for (let i = 0; i < parts.length; i++) {
        if (i % 2 === 0) { // only add the text outside of the delimiters
            result += parts[i];
        }
    }

    return result;
}

function measureTextWidthInOmniGraffle(text, fontName, fontSize, rotation) {
    // Create a temporary text object on the canvas
    const tempText = document.windows[0].selection.canvas.newShape();

    // Set the text and the font for the shape
    tempText.text = text;
    tempText.fontName = fontName;
    tempText.textSize = fontSize;

    // Set the textFlow to full
    tempText.autosizing = TextAutosizing.Full;
    tempText.rotation = rotation

    // Get the width of the text object
    var width = tempText.textGeometry.width
    var height = tempText.textGeometry.height

    // var width = tempText.geometry.width
    // var height = tempText.geometry.height

    // Remove the temporary text object from the canvas
    tempText.remove();

    return {
        width: width,
        height: height,
    };
}

function rotateGraphic(graphic, deltaTheta) {
    graphic.rotation += deltaTheta;  // Update the rotation of the current graphic
}

function rotateShift(xShift, yShift, theta, mode="CCW") {
    out = rotateAroundPoint(xShift, yShift, 0, 0, 0, 0, theta, mode)
    return {
        xShiftRotated: out.rotatedX,
        yShiftRotated: out.rotatedY
    };
}

function rotateAroundPoint(x, y, xShift, yShift, pX, pY, theta, mode="CCW") {
    x += xShift
    y += yShift

    // Convert the angle from degrees to radians
    let rad = (Math.PI / 180) * theta;


    // if (theta >= 0 && theta <= 90) {
        // Translate point to new origin (pX, pY)
        let xTrans = x - pX;
        let yTrans = y - pY;

        var xRotated = xTrans
        var yRotated = yTrans

        if (mode === "CCW") {
            // Rotate the point (using counter-clockwise rotation formulas)
            xRotated = xTrans * Math.cos(rad) - yTrans * Math.sin(rad);
            yRotated = xTrans * Math.sin(rad) + yTrans * Math.cos(rad);
        } else if (mode === "CW") {
            // Rotate the point (using clockwise rotation formulas)
            xRotated = xTrans * Math.cos(rad) + yTrans * Math.sin(rad);
            yRotated = -xTrans * Math.sin(rad) + yTrans * Math.cos(rad);
        }

        // Translate back to original coordinate system
        let rotatedX = xRotated + pX;
        let rotatedY = yRotated + pY;

        return {
            rotatedX: rotatedX,
            rotatedY: rotatedY
        };
    // } else {
    //
    // }


}


// objRotation = canvases[0].graphics[2].rotation;
// textRotation = canvases[0].graphics[2].textRotation;
//
// preModsObjGeometry = canvases[0].graphics[2].geometry
// preModsTextGeometry = canvases[0].graphics[2].textGeometry
//
// canvases[0].graphics[2].rotation = 0;
// postObjRotObjGeometry = canvases[0].graphics[2].geometry
// postObjRotTextGeometry = canvases[0].graphics[2].textGeometry
// canvases[0].graphics[2].rotation = objRotation;
//
// canvases[0].graphics[2].textRotation = 10;
// postTextRotObjGeometry = canvases[0].graphics[2].geometry
// postTextRotTextGeometry = canvases[0].graphics[2].textGeometry
// canvases[0].graphics[2].textRotation = textRotation;
//
//
// console.log(`Pre-Rotations: (geometry.origin.x: ${preModsObjGeometry.origin.x},
//                                  geometry.origin.y: ${preModsObjGeometry.origin.y},
//                                  geometry.center.x: ${preModsObjGeometry.center.x},
//                                  geometry.center.y: ${preModsObjGeometry.center.y})`);
// console.log(`Pre-Rotations: (geometry.width: ${preModsObjGeometry.width}, geometry.height: ${preModsObjGeometry.height})`);
// console.log(`Post-ObjRotation: (geometry.origin.x: ${postObjRotObjGeometry.origin.x},
//                                  geometry.origin.y: ${postObjRotObjGeometry.origin.y},
//                                  geometry.center.x: ${postObjRotObjGeometry.center.x},
//                                  geometry.center.y: ${postObjRotObjGeometry.center.y})`);
// console.log(`Post-TextRotation: (geometry.origin.x: ${postTextRotObjGeometry.origin.x},
//                                  geometry.origin.y: ${postTextRotObjGeometry.origin.y},
//                                  geometry.center.x: ${postTextRotObjGeometry.center.x},
//                                  geometry.center.y: ${postTextRotObjGeometry.center.y})`);
// console.log(`Post-TextRotation: (geometry.width: ${postTextRotObjGeometry.width}, geometry.height: ${postTextRotObjGeometry.height})`);
// console.log(`Post-ObjRotation: (geometry.width: ${postObjRotObjGeometry.width}, geometry.height: ${postObjRotObjGeometry.height})`);
//
//
// console.log(`Pre-Rotations: (textGeometry.origin.x: ${preModsTextGeometry.origin.x},
//                                  textGeometry.origin.y: ${preModsTextGeometry.origin.y},
//                                  textGeometry.center.x: ${preModsTextGeometry.center.x},
//                                  textGeometry.center.y: ${preModsTextGeometry.center.y})`);
// console.log(`Pre-Rotations: (textGeometry.width: ${preModsTextGeometry.width}, textGeometry.height: ${preModsTextGeometry.height})`);
// console.log(`Post-ObjRotation: (textGeometry.origin.x: ${postObjRotTextGeometry.origin.x},
//                                  textGeometry.origin.y: ${postObjRotTextGeometry.origin.y},
//                                  textGeometry.center.x: ${postObjRotTextGeometry.center.x},
//                                  textGeometry.center.y: ${postObjRotTextGeometry.center.y})`);
// console.log(`Post-TextRotation: (textGeometry.origin.x: ${postTextRotTextGeometry.origin.x},
//                                  textGeometry.origin.y: ${postTextRotTextGeometry.origin.y},
//                                  textGeometry.center.x: ${postTextRotTextGeometry.center.x},
//                                  textGeometry.center.y: ${postTextRotTextGeometry.center.y})`);
// console.log(`Post-ObjRotation: (textGeometry.width: ${postObjRotTextGeometry.width}, textGeometry.height: ${postObjRotTextGeometry.height})`);
// console.log(`Post-TextRotation: (textGeometry.width: ${postTextRotTextGeometry.width}, textGeometry.height: ${postTextRotTextGeometry.height})`);


// So object rotation does not change the object geometry (no change in origin or center)
// So TextRotation does not change the object geometry (no change in origin or center)
// Both object rotation and text rotation change the textGeometry's origin, but not the center

// Both Object Rotation and Text Rotation change the textGeometry's width and height
// Both Object Rotation and Text Rotation do not change the object geometry's width and height
// Object Geometry and Text Geometry have the same center

// function extractTextPositions(obj, extremities, size, aspectratio, ratio, mode) {
//     var result = "";
//     var minimumX = extremities.minimumX
//     var minimumY = extremities.minimumY
//     var maximumX = extremities.maximumX
//     var maximumY = extremities.maximumY
//     var width = size.width
//     var height = size.height
//     var permil = 1000
//
//     if (obj.text && obj.text.trim() !== "") {
//         var objText = escapeLaTeX(obj.text);
//
//         var textGeometryX = obj.textGeometry.origin.x;
//         var textGeometryY = obj.textGeometry.origin.y;
//
//         var rotation = obj.rotation || 0;
//         rotateGraphic(obj, -rotation)
//         var textGeometryWidth = obj.textGeometry.width;
//         var textGeometryHeight = obj.textGeometry.height;
//         var textHorizontalAlignment = obj.textHorizontalAlignment;
//         rotateGraphic(obj, +rotation)
//
//         // Handle text rotation
//         var rotateString = rotation !== 0 ? `\\rotatebox{${-rotation}}{` : "";
//
//         var color = obj.textColor;
//         var fontSize = obj.textSize;
//         var fontName = obj.fontName;
//         var useFontSize = true;
//         // var useFontSize = false;
//
//         var lineHeight = fontSize * 1.5 * ratio;
//         var isBold = fontName && containsString(fontName, "bold");
//         var isItalic = fontName && containsString(fontName, "italic");
//         var fontStringOpening = useFontSize == true ? `{\\fontsize{${fontSize}}{${fontSize}}\\selectfont` : "";
//         var fontStringClosing = useFontSize == true ? "}" : "";
//         var boldStringOpening = isBold == true ? `\\textbf{` : "";
//         var boldStringClosing = isBold == true ? "}" : "";
//         var italicStringOpening = isItalic == true ? `\\textit{` : "";
//         var italicStringClosing = isItalic == true ? "}" : "";
//         var lineHeightLatex = useFontSize == true ? `\\lineheight{${lineHeight}}` : "";
//
//         var lines = objText.split('\n');
//         // var tabularContent = lines.map(line => line.trim()).join("\\\\");
//
//         var linesAmt = lines.length
//         var heightPerLine = textGeometryHeight / linesAmt;
//
//         var alpha = color ? color.alpha : 1;
//         var red = color ? color.red : 0;
//         var green = color ? color.green : 0;
//         var blue = color ? color.blue : 0;
//         var rgbString = `${red},${green},${blue}`;
//
//         for (let i = 0; i < linesAmt; i++) {
//             var tabularContent = lines[i].trim();
//             var lineSize = measureTextWidthInOmniGraffle(tabularContent, fontName, fontSize, 0);
//             var lineWidth = lineSize.width
//             var lineOriginX = textGeometryX
//             var lineOriginY = textGeometryY
//
//             if (textHorizontalAlignment === HorizontalTextAlignment.Left) {
//                 var xShift = 0
//             } else if (textHorizontalAlignment === HorizontalTextAlignment.Center) {
//                 var xShift = (textGeometryWidth / 2) - (lineWidth / 2);
//             } else if (textHorizontalAlignment === HorizontalTextAlignment.Right) {
//                 var xShift = textGeometryWidth - lineWidth;
//             }
//
//             if (containsString(tabularContent, "*2")) {
//                 console.log(xShift);
//                 console.log("OriginX: " + lineOriginX);
//             }
//
//             var yShift = + ((i + 1) * heightPerLine);
//
//             angled_shifts = rotateShift(xShift, yShift, rotation)
//             xShiftRotated = angled_shifts.xShiftRotated
//             yShiftRotated = angled_shifts.yShiftRotated
//
//             // console.log(`${tabularContent} at (${((lineOriginX - minimumX) / width) * ratio * 100}, ${((lineOriginY + minimumY) / height) * ratio * aspectratio * 100}) shifted by (${xShift/width*ratio * 100}, ${yShift/height*ratio*aspectratio * 100})`)
//             console.log(`${tabularContent} at (${(lineOriginX) * ratio}, ${lineOriginY * ratio}) shifted by (${xShift}, ${yShift})`)
//
//             var x = lineOriginX + xShift
//             var y = lineOriginY + yShiftRotated
//
//             // Reset position w.r.t new origin point
//             x = x - minimumX
//             y = y - minimumY
//
//             // Multiply coordinates by ratio and aspectratio
//             x = (x/width) * ratio
//             y = (y/height) * ratio * aspectratio
//
//             // Invert the Y coordinates
//             y = (height/height * ratio * aspectratio) - y
//
//             if (mode.toLowerCase() === "overpic") {
//                 x = x * permil;
//                 y = y * permil;
//             }
//
//             // Create the LaTeX \put command for each line
//             var command = `\\put(${x},${y}){\\color[rgb]{${rgbString}}${rotateString}\\makebox(0,0)[lt]{${lineHeightLatex}\\smash{${fontStringOpening}${boldStringOpening}${italicStringOpening}\\begin{tabular}[t]{l}${tabularContent}\\end{tabular}}}${italicStringClosing}${boldStringClosing}${fontStringClosing}}${rotation !== 0 ? "}" : ""}%\n`;
//             result += command;
//
//         }
//
//     }
//
//     if (obj.graphics) {
//         // Recurse into child graphics
//         for (child of obj.graphics) {
//             result += extractTextPositions(child, extremities, size, aspectratio, ratio, mode);
//         }
//     }
//
//     return result;
// }

function extractTextPositions(obj, extremities, size, aspectratio, ratio, mode) {
    var result = "";
    var minimumX = extremities.minimumX
    var minimumY = extremities.minimumY
    var maximumX = extremities.maximumX
    var maximumY = extremities.maximumY
    var canvasWidth = size.width
    var canvasHeight = size.height
    var permil = 1000

    var displayText = null
    if (obj.userData && "Text" in obj.userData && obj.userData["Text"] && obj.userData["Text"].trim() != "") {
        displayText = escapeLaTeX(obj.userData["Text"]);
    }

    if (obj.text && obj.text.trim() !== "") {
        objText = escapeLaTeX(obj.text);

        if (!displayText) {
            displayText = objText
        }

        var objRotation = obj.rotation || 0;

        // if (containsString(objText, "Encoder Blocks")) {
        //     console.log(objText)
        //     console.log("objRotation: " + objRotation)
        //     // objRotation = 90
        //     // console.log("new objRotation: " + objRotation)
        //
        // }

        // For the center, it doesn't matter which we use. Centers aren't affected by either transformation
        var textCenterX = obj.textGeometry.center.x;
        var textCenterY = obj.textGeometry.center.y;

        var bboxCenterX = obj.geometry.center.x;
        var bboxCenterY = obj.geometry.center.y;

        var bboxOriginX0Deg = obj.geometry.origin.x;
        var bboxOriginY0Deg = obj.geometry.origin.y;
        var bboxWidth0Deg = obj.geometry.width;
        var bboxHeight0Deg = obj.geometry.height;
        var bboxEndX0Deg = obj.geometry.origin.x + bboxWidth0Deg;
        var bboxEndY0Deg = obj.geometry.origin.y + bboxHeight0Deg;

        var bboxOriginRot = rotateAroundPoint(
            bboxOriginX0Deg,
            bboxOriginY0Deg,
            0,
            0,
            bboxCenterX,
            bboxCenterY,
            objRotation,                 // objRotation angle
            "CCW",
            // -objRotation,
            // "CW",
        );
        var bboxEndRot = rotateAroundPoint(
            bboxEndX0Deg,
            bboxEndY0Deg,
            0,
            0,
            bboxCenterX,
            bboxCenterY,
            objRotation,                 // objRotation angle
            "CCW",
            // -objRotation,
            // "CW",
        );
        var bboxOriginX = bboxOriginRot.rotatedX
        var bboxOriginY = bboxOriginRot.rotatedY
        var bboxEndX = bboxEndRot.rotatedX
        var bboxEndY = bboxEndRot.rotatedY
        var bboxWidth = bboxEndX - bboxOriginX
        var bboxHeight = bboxEndY - bboxOriginY

        var textOriginX = obj.textGeometry.origin.x;
        var textOriginY = obj.textGeometry.origin.y;
        var textWidth = obj.textGeometry.width;
        var textHeight = obj.textGeometry.height;
        rotateGraphic(obj, -objRotation)
        var textHorizontalAlignment = obj.textHorizontalAlignment;
        var textOriginX0Deg = obj.textGeometry.origin.x;
        var textOriginY0Deg = obj.textGeometry.origin.y;
        var textWidth0Deg = obj.textGeometry.width;
        var textHeight0Deg = obj.textGeometry.height;
        rotateGraphic(obj, +objRotation)


        // Handle text objRotation
        var rotateString = objRotation !== 0 ? `\\rotatebox{${-objRotation}}{` : "";

        var color = obj.textColor;
        var fontSize = obj.textSize;
        var fontName = obj.fontName;
        var useFontSize = true;
        // var useFontSize = false;

        var lineHeight = fontSize * 1.5 * ratio;
        var isBold = fontName && containsString(fontName, "bold");
        var isItalic = fontName && containsString(fontName, "italic");
        var fontStringOpening = useFontSize == true ? `{\\fontsize{${fontSize}}{${fontSize}}\\selectfont` : "";
        var fontStringClosing = useFontSize == true ? "}" : "";
        var boldStringOpening = isBold == true ? `\\textbf{` : "";
        var boldStringClosing = isBold == true ? "}" : "";
        var italicStringOpening = isItalic == true ? `\\textit{` : "";
        var italicStringClosing = isItalic == true ? "}" : "";
        var lineHeightLatex = useFontSize == true ? `\\lineheight{${lineHeight}}` : "";

        var alpha = color ? color.alpha : 1;
        var red = color ? color.red : 0;
        var green = color ? color.green : 0;
        var blue = color ? color.blue : 0;
        var rgbString = `${red},${green},${blue}`;


        // WORKING
        // var originMode = "text0Deg"
        // var centerMode = "bbox"
        // var dimensionsMode = "text0Deg"

        // WORKING
        var originMode = "text0Deg"
        var centerMode = "text"
        var dimensionsMode = "text0Deg"

        // NOT WORKING
        // var originMode = "bbox"
        // var centerMode = "bbox"
        // var dimensionsMode = "text0Deg"


        // NOT WORKING
        // var originMode = "bbox"
        // var centerMode = "bbox"
        // var dimensionsMode = "bbox"

        if (originMode === "bbox0Deg") {
            var originX = bboxOriginX0Deg
            var originY = bboxOriginY0Deg
        } else if (originMode === "bbox") {
            var originX = bboxOriginX
            var originY = bboxOriginY
        } else if (originMode === "text") {
            var originX = textOriginX
            var originY = textOriginY
        } else if (originMode === "text0Deg") {
            var originX = textOriginX0Deg
            var originY = textOriginY0Deg
        }

        if (centerMode === "bbox") {
            var centerX = bboxCenterX
            var centerY = bboxCenterY
        } else if (centerMode === "text") {
            var centerX = textCenterX
            var centerY = textCenterY
        }

        if (dimensionsMode === "bbox0Deg") {
            var width = bboxWidth0Deg
            var height = bboxHeight0Deg
        } else if (dimensionsMode === "bbox") {
            var width = bboxWidth
            var height = bboxHeight
        } else if (dimensionsMode === "text") {
            var width = textWidth
            var height = textHeight
        } else if (dimensionsMode === "text0Deg") {
            var width = textWidth0Deg
            var height = textHeight0Deg
        }

        var lines = objText.split('\n');
        var linesAmt = lines.length
        var heightPerLine = height / linesAmt;

        var displayLines = displayText.split('\n');


        // var lineWidth = 0
        // for (let i = 0; i < linesAmt; i++) {
        //     lineWidth_ = measureTextWidthInOmniGraffle(lines[i].trim(), fontName, fontSize, 0).width
        //     if (lineWidth_ > lineWidth) {
        //         lineWidth = lineWidth_
        //     }
        // }

        for (let i = 0; i < linesAmt; i++) {
            var tabularContent = lines[i].trim();
            var lineSize = measureTextWidthInOmniGraffle(tabularContent, fontName, fontSize, 0);
            var lineWidth = lineSize.width

            tabularContent = displayLines[i].trim();

            if (textHorizontalAlignment === HorizontalTextAlignment.Left) {
                var xShift = 0
            } else if (textHorizontalAlignment === HorizontalTextAlignment.Center) {
                var xShift = (width / 2) - (lineWidth / 2);
            } else if (textHorizontalAlignment === HorizontalTextAlignment.Right) {
                var xShift = width - lineWidth;
            }


            if (objRotation >= 0 && objRotation <= 90) {
                var yShift = ((i + 1) * heightPerLine);
            } else {
                var yShift = -.35 * heightPerLine + ((i + 1) * heightPerLine);
            }

            // xShift = 0

            var rotatedPoint = rotateAroundPoint(
                originX,  // unrotated x position
                originY,  // unrotated y position
                xShift,
                yShift,
                centerX,           // text box's x origin
                centerY,           // text box's y origin
                objRotation,                 // objRotation angle
                "CCW",
                // -objRotation,
                // "CW",
            );

            var x = rotatedPoint.rotatedX
            var y = rotatedPoint.rotatedY

            // Reset position w.r.t new origin point
            x = x - minimumX
            y = y - minimumY

            // Multiply coordinates by ratio and aspectratio
            x = (x/canvasWidth) * ratio
            y = (y/canvasHeight) * ratio * aspectratio

            // Invert the Y coordinates
            y = (canvasHeight/canvasHeight * ratio * aspectratio) - y

            if (mode.toLowerCase() === "overpic") {
                x = x * permil;
                y = y * permil;
            }

            // Create the LaTeX \put command for each line
            var command = `\\put(${x},${y}){\\color[rgb]{${rgbString}}${rotateString}\\makebox(0,0)[lt]{${lineHeightLatex}\\smash{${fontStringOpening}${boldStringOpening}${italicStringOpening}\\begin{tabular}[t]{l}${tabularContent}\\end{tabular}}}${italicStringClosing}${boldStringClosing}${fontStringClosing}}${objRotation !== 0 ? "}" : ""}%\n`;
            result += command;

        }

    }

    if (obj.graphics) {
        // Recurse into child graphics
        for (child of obj.graphics) {
            result += extractTextPositions(child, extremities, size, aspectratio, ratio, mode);
        }
    }

    return result;
}

function processCanvas(pdfFilename_, pdfTexFilename_, canvas, canvas_name, ratio) {
    var canvasSize = extractCanvasSize(canvas)
    var canvasExtremities = extractExtremitiesCoordinates(canvas)

    var canvasSizeLatex = {height: canvasSize.height * ratio, width: canvasSize.width * ratio}
    var aspectratio = canvasSizeLatex.height / canvasSizeLatex.width


    console.log("Minimum X: " + canvasExtremities.minimumX)
    console.log("Minimum Y: " + canvasExtremities.minimumY)
    // canvasExtremities.minimumX = 0
    extractedPictureText = ""
    extractedOverpicText = extractTextPositions(canvas, canvasExtremities, canvasSize, aspectratio, ratio, "overpic");

    // 2. Export the figure without text to a PDF
    // Loops over all canvases and strips text color for each of the canvases
    stripTextColor(canvas, Color.RGB(1, 1, 1, 1))

    if (typeof canvas_name === 'undefined' || canvas_name === null) {
        var pdfFilename_c = pdfFilename_
        var pdfTexFilename_c = pdfTexFilename_
    } else {
        var pdfFilename_c = `${pdfFilename_}_${canvas_name}`
        var pdfTexFilename_c = pdfTexFilename_.replace(".pdf_tex.tex", `_${canvas_name}.pdf_tex.tex`)
    }
    var PDFwrapperPromise = document.makeFileWrapper(pdfFilename_c, "com.adobe.pdf")

    // 3. Create a new .pdf_tex file
    var pdfTexPictureContent = `
%% Creator: Peter El-Jiz
%% OmniGraffle -> PDF_Tex adapted from
%% PDF/EPS/PS + LaTeX output extension by Johan Engelen, 2010
%% Accompanies image file '{${pdfFilename_c}}' (pdf, eps, ps)
%%
%% To include the image in your LaTeX document, write
%%   \\input{<filename>.pdf_tex}
%%  instead of
%%   \\includegraphics{<filename>.pdf}
%% To scale the image, write
%%   \\def\\svgwidth{<desired width>}
%%   \\input{<filename>.pdf_tex}
%%  instead of
%%   \\includegraphics[width=<desired width>]{<filename>.pdf}
%%
%% Images with a different path to the parent latex file can
%% be accessed with the \`import' package (which may need to be
%% installed) using
%%   \\usepackage{import}
%% in the preamble, and then including the image with
%%   \\import{<path to file>}{<filename>.pdf_tex}
%% Alternatively, one can specify
%%   \\graphicspath{{<path to file>/}}
%%
%% For more information, please see info/svg-inkscape on CTAN:
%%   http://tug.ctan.org/tex-archive/info/svg-inkscape
%%
\\begingroup%
  \\makeatletter%
  \\providecommand\\color[2][]{%
    \\errmessage{(Inkscape) Color is used for the text in Inkscape, but the package 'color.sty' is not loaded}%
    \\renewcommand\\color[2][]{}%
  }%
  \\providecommand\\transparent[1]{%
    \\errmessage{(Inkscape) Transparency is used (non-zero) for the text in Inkscape, but the package 'transparent.sty' is not loaded}%
    \\renewcommand\\transparent[1]{}%
  }%
  \\providecommand\\rotatebox[2]{#2}%
  \\newcommand*\\fsize{\\dimexpr\\f@size pt\\relax}%
  \\newcommand*\\lineheight[1]{\\fontsize{\\fsize}{#1\\fsize}\\selectfont}%
  \\ifx\\svgwidth\\undefined%
    \\setlength{\\unitlength}{${canvasSizeLatex.width}bp}%
    \\ifx\\svgscale\\undefined%
      \\relax%
    \\else%
      \\setlength{\\unitlength}{\\unitlength * \\real{\\svgscale}}%
    \\fi%
  \\else%
    \\setlength{\\unitlength}{\\svgwidth}%
  \\fi%
  \\global\\let\\svgwidth\\undefined%
  \\global\\let\\svgscale\\undefined%
  \\makeatother%
  \\begin{picture}(1,${aspectratio})%
    \\lineheight{1}%
    \\setlength\\tabcolsep{0pt}%
	\\put(0,0){\\includegraphics[width=\\unitlength,page=1]{${pdfFilename_}/${pdfFilename_c}}}%
	${extractedPictureText}	
  \\end{picture}%
\\endgroup%
`

    // 3. Create a new .pdf_tex file
    var pdfTexOverpicContent = `
%% Creator: Peter El-Jiz
%% OmniGraffle -> PDF_Tex adapted from
%% PDF/EPS/PS + LaTeX output extension by Johan Engelen, 2010
%% Accompanies image file '{${pdfFilename_c}}' (pdf, eps, ps)
%%
%% To include the image in your LaTeX document, write
%%   \\input{<filename>.pdf_tex}
%%  instead of
%%   \\includegraphics{<filename>.pdf}
%% To scale the image, write
%%   \\def\\svgwidth{<desired width>}
%%   \\input{<filename>.pdf_tex}
%%  instead of
%%   \\includegraphics[width=<desired width>]{<filename>.pdf}
%%
%% Images with a different path to the parent latex file can
%% be accessed with the \`import' package (which may need to be
%% installed) using
%%   \\usepackage{import}
%% in the preamble, and then including the image with
%%   \\import{<path to file>}{<filename>.pdf_tex}
%% Alternatively, one can specify
%%   \\graphicspath{{<path to file>/}}
%%
%% For more information, please see info/svg-inkscape on CTAN:
%%   http://tug.ctan.org/tex-archive/info/svg-inkscape
%%
\\begingroup%
  \\makeatletter%
  \\providecommand\\color[2][]{%
    \\errmessage{(Inkscape) Color is used for the text in Inkscape, but the package 'color.sty' is not loaded}%
    \\renewcommand\\color[2][]{}%
  }%
  \\providecommand\\transparent[1]{%
    \\errmessage{(Inkscape) Transparency is used (non-zero) for the text in Inkscape, but the package 'transparent.sty' is not loaded}%
    \\renewcommand\\transparent[1]{}%
  }%
  \\providecommand\\rotatebox[2]{#2}%
  \\newcommand*\\fsize{\\dimexpr\\f@size pt\\relax}%
  \\newcommand*\\lineheight[1]{\\fontsize{\\fsize}{#1\\fsize}\\selectfont}%
  \\ifx\\svgwidth\\undefined%
    \\setlength{\\unitlength}{${canvasSizeLatex.width}bp}%
    \\ifx\\svgscale\\undefined%
      \\relax%
    \\else%
      \\setlength{\\unitlength}{\\unitlength * \\real{\\svgscale}}%
    \\fi%
  \\else%
    \\setlength{\\unitlength}{\\svgwidth}%
  \\fi%
  \\global\\let\\svgwidth\\undefined%
  \\global\\let\\svgscale\\undefined%
  \\makeatother%
  \\begin{overpic}[width=\\unitlength,permil,tics=100]{${pdfFilename_}/${pdfFilename_c}}
    \\lineheight{1}%
    \\setlength\\tabcolsep{0pt}%
	${extractedOverpicText}	
  \\end{overpic}%
\\endgroup%
`
    var pdfTexWrapper = FileWrapper.withContents(pdfTexFilename_c, Data.fromString(pdfTexOverpicContent));

    out = {
        PDFwrapperPromise: PDFwrapperPromise,
        pdfTexWrapper: pdfTexWrapper,
    }

    return out;

}

(() => {
    var action = new PlugIn.Action(async function (selection) {
        var fileName = document.name;
        var pdfFilename_ = fileName.toString().replace(/\.graffle$/, "");
        var pdfTexFilename_ = fileName.toString().replace(/\.graffle$/, ".pdf_tex.tex");

        // As LaTex uses big points, we have to multiply the dimensions by the ratio: 72.27/72
        var ratio = 72.27 / 72

        // 1. Extract Text Positions from the document with text
        var extractedText = "";
        // Iterate through the canvases and extract text positions
        var promises = Array()

        var canvasesLen = canvases.length;
        var canvas = document.windows[0].selection.canvas
        var canvas_name = null
        if (canvasesLen > 1) {
            canvas_name = canvas.name
        }

        if (typeof canvas_name === 'undefined' || canvas_name === null) {
            var pdfFilename_c = pdfFilename_
        } else {
            var pdfFilename_c = `${pdfFilename_}_${canvas_name}`
        }

        output = processCanvas(pdfFilename_, pdfTexFilename_, canvas, canvas_name, ratio)
        promises.push(output.PDFwrapperPromise)
        promises.push(output.pdfTexWrapper)

        Promise.all(promises).then(fileWrappers => {
            // Create and Show File Saver
            var filesaver = new FileSaver()
            filesaver.types = [new FileType("public.folder"), new FileType("public.txt"), FileType.pdf]
            var fldrwrapper = FileWrapper.withChildren(`${pdfFilename_c}`, fileWrappers)
            var fileSaverPromise = filesaver.show(fldrwrapper)

            // Process File Saver Result
            fileSaverPromise.then(urlObj => {
                console.log(urlObj.string)
            })

            fileSaverPromise.catch(err => {
                console.log(err.message)
            })

        }).catch(err => {
            console.log("Error", err.message)
        })

    });

    return action;
})();